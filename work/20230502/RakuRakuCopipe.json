{
  "work_dir": "C:\\Users\\kenwa\\work\\comm\\work\\20230502",
  "dir_structure": [
    "C:\\Users\\kenwa\\work\\comm\\work\\20230502\\test_dr"
  ],
  "files": [
    {
      "filename": "C:\\Users\\kenwa\\work\\comm\\work\\20230502\\messagebox.py",
      "contents": "# -*- coding: utf-8 -*-\n#\n#  message box の出力を行う。\n#\n#\n#\nfrom ctypes import *\n\ndef main() : \n\n    message_box(\"debug\", \"なんてこった。\")\n    print('start')\n\n\ndef message_box(title, contents) :\n    user32 = windll.user32\n    user32.MessageBoxW(\n        0, \n        contents,\n        title,         \n        0x00000040)\n\n\n\nif __name__ == '__main__' :\n    main()"
    },
    {
      "filename": "C:\\Users\\kenwa\\work\\comm\\work\\20230502\\rakurakucopipe.py",
      "contents": "# -*- coding: utf-8 -*-\n#\n# rakuraku copy and paste\n#\n# イメージの説明\n#    引数 -i : summary.json -> files\n#    引数 -o : files        -> summary.json \n#\n#\n#\n#\n#\n#\n#\nimport argparse\nimport glob\nimport os\nimport json \nfrom enum import Enum\n\nverbose = [False]\n\nclass Mode(Enum) : \n    FILE_TO_JSON = 1\n    JSON_TO_FILE = 2\n\n## constants \nTMP_DIR = \".\\\\tmp\"\nJSON_FILE_NAME = f\"RakuRakuCopipe.json\"\nOUTPUT_DIR =  f\"{TMP_DIR}/output\"\n\n\ndef main() :    \n    mode = parse_args()\n    if mode == Mode.FILE_TO_JSON :\n        convert_files_to_json()        \n    else :\n        convert_json_to_files()\n\n\n\ndef vprint(*txt) :     \n    if verbose[0] :         \n        print(*txt)\n\nimport shutil \n\ndef convert_files_to_json() :\n    print(\"Execute mode : files to json\")        \n    os.makedirs(TMP_DIR, exist_ok=True)\n    \n    file_names, dir_names = get_file_and_dir_names()\n\n    dict_list = []\n    for filename in file_names : \n        unit = make_dict_with_readfile(filename)\n        dict_list.append(unit)    \n    \n    work_dir = os.path.dirname(get_fullpath(__file__))\n    json_content = {\"work_dir\": work_dir, \"dir_structure\": dir_names, \"files\": dict_list}\n    \n    with open(JSON_FILE_NAME, \"w\", encoding=\"utf-8\") as f:\n        json.dump(json_content, f, ensure_ascii=False, indent=2)\n        f.close()\n\n\ndef convert_json_to_files() :\n    print(\"Execute mode : json to files\")\n\n    shutil.rmtree(TMP_DIR)\n    exit(1)\n\n    with open(JSON_FILE_NAME, \"r\", encoding=\"utf-8\") as f:\n        json_content = json.load(f)\n    \n\n    work_dir = os.path.dirname(get_fullpath(__file__))\n    json_work_dir = json_content[\"work_dir\"] \n\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    for dir_path in json_content[\"dir_structure\"] : \n        vprint(\"v010 : json_dir_path : \", dir_path)\n        path = dir_path.replace(json_work_dir, OUTPUT_DIR)\n        print(\"Create directory : \", path)\n        os.makedirs(path, exist_ok=True)\n    \n    for unit_dict in json_content[\"files\"]:\n        org_filename = unit_dict[\"filename\"]\n        outpath = org_filename.replace(json_work_dir, OUTPUT_DIR)        \n        print(\"Create file : \", outpath)\n\n        with open(outpath, \"w\", encoding=\"utf-8\") as f : \n            f.write(unit_dict[\"contents\"])\n\n\n\ndef make_dict_with_readfile(filename) :\n    ans = {\"filename\": filename, \"contents\": \"\"} \n\n    with open(filename, 'r', encoding='utf-8') as f : \n        contents = f.read()\n\n    ans[\"contents\"] = contents\n\n    return ans\n\n\n\n    \n\n#\n# 現在の directory の ファイルをコピーする\n#\n#\ndef get_file_and_dir_names() :             \n    all_fullpath = []\n    \n    all_names = glob.glob(\"./**/*\", recursive=True)\n    ignores = get_ignore_objs()        \n    for n in all_names : \n        fullpath = get_fullpath(n)\n        if fullpath in ignores : \n            vprint(f\"v007: {fullpath} is included in .gitignore\")\n            continue\n        all_fullpath.append(fullpath)\n\n    \n    file_names = [] \n    dir_names = []    \n    for n in all_fullpath :         \n        if os.path.isfile(n) :            \n            file_names.append(n)\n        \n        if os.path.isdir(n) :\n            if TMP_DIR == n : continue\n            dir_names.append(n)\n\n    vprint(\"v005: filenames : \", file_names)\n    vprint(\"v006: dirnames : \", dir_names)    \n    \n    return file_names, dir_names\n\n#\n# name of ignore files and directories defined in .gitignore\n#\ndef get_ignore_objs() :    \n    with open(\".gitignore\", encoding='utf-8') as f :\n        tmp_keys = f.readlines()\n        keys = []\n        for tmp_key in tmp_keys :             \n            # remove comment out \n            itr = tmp_key.find('#')\n            if itr >= 0 : \n                tmp_key = tmp_key[:itr]\n            \n            # remove \\n, \\t, and space.\n            key = tmp_key.strip() \n                        \n            if key :\n                keys.append(key)\n            \n    vprint(\"v001: keys in ignorefile : \", keys)\n\n    # This will be return \n    ignore_filenames = []\n\n    for key in keys :         \n        tmpfiles = glob.glob(f\"**/{key}\", recursive=True)        \n        vprint(f\"v002: key ({key}) : tmpfiles : \", tmpfiles)\n        \n        for f in tmpfiles :\n            filename = get_fullpath(f)\n            ignore_filenames.append(filename)\n                    \n    vprint(\"v003: fullpath = \", ignore_filenames)\n    \n    return ignore_filenames\n\n\n    \n\n\ndef get_fullpath(filename) : \n    return os.path.abspath(filename)\n\n\ndef parse_args() :\n    ## description     \n    my_desc = 'Description: ファイルをjsonファイルにまとめたり、jsonファイルをfileに分解したり'\n    parser = argparse.ArgumentParser(description=my_desc)\n        \n    parser.add_argument('--files_to_json', '--f2j',\n                        action = 'store_true',\n                        help = 'Mode : convert files to json')\n    parser.add_argument('--json_to_files', '--j2f',\n                        action = 'store_true',                            \n                        help = 'Mode : convert json to files')\n\n    parser.add_argument('--verbose', '-v',\n                        action = 'store_true',                            \n                        help = 'verbose print on for debug')\n\n    args = vars(parser.parse_args())\n    \n    # set verbose mode\n    verbose[0] = args[\"verbose\"]        \n    vprint(\"Verbose mode (for debug) start\")\n\n\n    # default : convert files to json mode\n    if args['files_to_json'] and args['files_to_json'] : \n        return Mode.FILE_TO_JSON\n    elif args['files_to_json'] :\n        return Mode.FILE_TO_JSON\n    elif args['json_to_files'] :\n        return Mode.JSON_TO_FILE\n    else :\n        return Mode.FILE_TO_JSON\n\n\n\n\n\nif __name__ == '__main__' :\n    main()"
    },
    {
      "filename": "C:\\Users\\kenwa\\work\\comm\\work\\20230502\\test.py",
      "contents": "# -*- coding: utf-8 -*-\n\nfrom ctypes import *\nimport sys\nimport time\n\n\ndef main() : \n    args = sys.argv\n    print(args)\n    \n    if len(args) != 2 :\n        message_box(\"debug\", \"Error 001 : args is wrong\")    \n    \n    print('start')\n    message_box(\"debug\", args[1]) \n    print('done')\n    time.sleep(10)\n    \n\n\ndef message_box(title, contents) :    \n    user32 = windll.user32\n    user32.MessageBoxW(\n        0, \n        contents,\n        title,         \n        0x00000040)\n\n\n\nif __name__ == '__main__' :\n    main()"
    },
    {
      "filename": "C:\\Users\\kenwa\\work\\comm\\work\\20230502\\test_dr\\ababa",
      "contents": ""
    }
  ]
}